/// <reference types="mapbox__point-geometry" />
import MapUI from './ui/map';
import AutocompleteUI from './ui/autocomplete';
import type { Location, RadarAutocompleteParams, RadarConversionParams, RadarDistanceParams, RadarForwardGeocodeParams, RadarMatrixParams, RadarMetadata, RadarOptions, RadarReverseGeocodeParams, RadarSearchGeofencesParams, RadarSearchPlacesParams, RadarTrackParams, RadarTripOptions, RadarValidateAddressParams } from './types';
import 'maplibre-gl/dist/maplibre-gl.css';
import '../styles/radar.css';
declare class Radar {
    static get VERSION(): string;
    static get ui(): {
        maplibregl: {
            supported: import("@mapbox/mapbox-gl-supported").IsSupported;
            setRTLTextPlugin: (url: string, callback: (error?: Error | undefined) => void, deferred?: boolean | undefined) => void;
            getRTLTextPluginStatus: () => string;
            Map: typeof import("maplibre-gl").Map;
            NavigationControl: typeof import("maplibre-gl").NavigationControl;
            GeolocateControl: typeof import("maplibre-gl").GeolocateControl;
            AttributionControl: typeof import("maplibre-gl").AttributionControl;
            LogoControl: typeof import("maplibre-gl").LogoControl;
            ScaleControl: typeof import("maplibre-gl").ScaleControl;
            FullscreenControl: typeof import("maplibre-gl").FullscreenControl;
            TerrainControl: typeof import("maplibre-gl").TerrainControl;
            Popup: typeof import("maplibre-gl").Popup;
            Marker: typeof import("maplibre-gl").Marker;
            Style: typeof import("maplibre-gl").Style;
            LngLat: typeof import("maplibre-gl").LngLat;
            LngLatBounds: typeof import("maplibre-gl").LngLatBounds;
            Point: typeof import("@mapbox/point-geometry");
            MercatorCoordinate: typeof import("maplibre-gl").MercatorCoordinate;
            Evented: typeof import("maplibre-gl").Evented;
            AJAXError: typeof import("maplibre-gl").AJAXError;
            config: {
                MAX_PARALLEL_IMAGE_REQUESTS: number;
                REGISTERED_PROTOCOLS: {
                    [x: string]: any;
                };
            };
            CanvasSource: typeof import("maplibre-gl").CanvasSource;
            GeoJSONSource: typeof import("maplibre-gl").GeoJSONSource;
            ImageSource: typeof import("maplibre-gl").ImageSource;
            RasterDEMTileSource: typeof import("maplibre-gl").RasterDEMTileSource;
            RasterTileSource: typeof import("maplibre-gl").RasterTileSource;
            VectorTileSource: typeof import("maplibre-gl").VectorTileSource;
            VideoSource: typeof import("maplibre-gl").VideoSource;
            prewarm: () => void;
            clearPrewarmedResources: () => void;
            readonly version: string;
            workerCount: number;
            maxParallelImageRequests: number;
            clearStorage(callback?: ((err?: Error | null | undefined) => void) | undefined): void;
            workerUrl: string;
            addProtocol(customProtocol: string, loadFn: (requestParameters: import("maplibre-gl").RequestParameters, callback: import("maplibre-gl").ResponseCallback<any>) => import("maplibre-gl").Cancelable): void;
            removeProtocol(customProtocol: string): void;
        };
        map: typeof MapUI.createMap;
        marker: typeof MapUI.createMarker;
        autocomplete: typeof AutocompleteUI.createAutocomplete;
    };
    static initialize(publishableKey: string, options?: RadarOptions): void;
    static clear(): void;
    static setUserId(userId?: string): void;
    static setDescription(description?: string): void;
    static setMetadata(metadata?: RadarMetadata): void;
    static getLocation(): Promise<import("./types").NavigatorPosition>;
    static trackOnce(params?: RadarTrackParams): Promise<import("./types").RadarTrackResponse>;
    static trackVerified(params?: RadarTrackParams): Promise<import("./types").RadarTrackVerifiedResponse>;
    static getContext(params: Location): Promise<import("./types").RadarContextResponse>;
    static setTripOptions(tripOptions?: RadarTripOptions): void;
    static clearTripOptions(): void;
    static getTripOptions(): RadarTripOptions;
    static startTrip(tripOptions: RadarTripOptions): Promise<import("./types").RadarTripResponse>;
    static updateTrip(tripOptions: RadarTripOptions): Promise<import("./types").RadarTripResponse>;
    static completeTrip(): Promise<import("./types").RadarTripResponse>;
    static cancelTrip(): Promise<import("./types").RadarTripResponse>;
    static logConversion(params: RadarConversionParams): Promise<import("./types").RadarConversionResponse>;
    static forwardGeocode(params: RadarForwardGeocodeParams): Promise<import("./types").RadarGeocodeResponse>;
    static reverseGeocode(params: RadarReverseGeocodeParams): Promise<import("./types").RadarGeocodeResponse>;
    static ipGeocode(): Promise<import("./types").RadarIPGeocodeResponse>;
    static autocomplete(params: RadarAutocompleteParams): Promise<import("./types").RadarAutocompleteResponse>;
    static searchGeofences(params: RadarSearchGeofencesParams): Promise<import("./types").RadarSearchGeofencesResponse>;
    static searchPlaces(params: RadarSearchPlacesParams): Promise<import("./types").RadarSearchPlacesResponse>;
    static validateAddress(params: RadarValidateAddressParams): Promise<import("./types").RadarValidateAddressResponse>;
    static distance(params: RadarDistanceParams): Promise<import("./types").RadarRouteResponse>;
    static matrix(params: RadarMatrixParams): Promise<import("./types").RadarMatrixResponse>;
}
export default Radar;
