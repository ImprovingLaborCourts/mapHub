/// <reference types="mapbox__point-geometry" />
import type { RadarMapOptions, RadarMarkerOptions } from '../types';
declare class MapUI {
    static getMapLibre(): {
        supported: import("@mapbox/mapbox-gl-supported").IsSupported;
        setRTLTextPlugin: (url: string, callback: (error?: Error | undefined) => void, deferred?: boolean | undefined) => void;
        getRTLTextPluginStatus: () => string;
        Map: typeof import("maplibre-gl").Map;
        NavigationControl: typeof import("maplibre-gl").NavigationControl;
        GeolocateControl: typeof import("maplibre-gl").GeolocateControl;
        AttributionControl: typeof import("maplibre-gl").AttributionControl;
        LogoControl: typeof import("maplibre-gl").LogoControl;
        ScaleControl: typeof import("maplibre-gl").ScaleControl;
        FullscreenControl: typeof import("maplibre-gl").FullscreenControl;
        TerrainControl: typeof import("maplibre-gl").TerrainControl;
        Popup: typeof import("maplibre-gl").Popup;
        Marker: typeof import("maplibre-gl").Marker;
        Style: typeof import("maplibre-gl").Style;
        LngLat: typeof import("maplibre-gl").LngLat;
        LngLatBounds: typeof import("maplibre-gl").LngLatBounds;
        Point: typeof import("@mapbox/point-geometry");
        MercatorCoordinate: typeof import("maplibre-gl").MercatorCoordinate;
        Evented: typeof import("maplibre-gl").Evented;
        AJAXError: typeof import("maplibre-gl").AJAXError;
        config: {
            MAX_PARALLEL_IMAGE_REQUESTS: number;
            REGISTERED_PROTOCOLS: {
                [x: string]: any;
            };
        };
        CanvasSource: typeof import("maplibre-gl").CanvasSource;
        GeoJSONSource: typeof import("maplibre-gl").GeoJSONSource;
        ImageSource: typeof import("maplibre-gl").ImageSource;
        RasterDEMTileSource: typeof import("maplibre-gl").RasterDEMTileSource;
        RasterTileSource: typeof import("maplibre-gl").RasterTileSource;
        VectorTileSource: typeof import("maplibre-gl").VectorTileSource;
        VideoSource: typeof import("maplibre-gl").VideoSource;
        prewarm: () => void;
        clearPrewarmedResources: () => void;
        readonly version: string;
        workerCount: number;
        maxParallelImageRequests: number;
        clearStorage(callback?: ((err?: Error | null | undefined) => void) | undefined): void;
        workerUrl: string;
        addProtocol(customProtocol: string, loadFn: (requestParameters: import("maplibre-gl").RequestParameters, callback: import("maplibre-gl").ResponseCallback<any>) => import("maplibre-gl").Cancelable): void;
        removeProtocol(customProtocol: string): void;
    };
    static createMap(mapOptions: RadarMapOptions): maplibregl.Map;
    static createMarker(markerOptions?: RadarMarkerOptions): maplibregl.Marker;
}
export default MapUI;
